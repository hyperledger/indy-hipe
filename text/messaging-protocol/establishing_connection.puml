@startuml

' class Dummy {
'   {field} A field (despite parentheses)
'   {method} Some method
' }

actor Alice as A
'participant "Alice's\nAgent" as A
'participant "Bob's\nAgent" as B
actor Bob as B


rnote over A #white
QR {
    nonce
    endpoint: did or (url+vk)
    con_req vk?
}
end note


A -> B: A makes a connection offer, in\nperson or securely over internet
|||


'This adds the rectangles on the lines=

rnote over B #white
con_req = {
    id: nonce
    type: con_req
    content: {
            did@B:A
            vk@B:A
            ep@B
        }
    }
}
anoncrypt(con_req, ep vk@A)
(from QR endpoint)
end note

note left of B
ep@B = json {
    "did": ...
    "url": ...
    "vk": ...
}
end note


'B -> B: Could optionally encrypt content\nusing additional key sent in offer

B -->> A: Send connection request message
|||

rnote over A #white
con_res = {
    id: did@B:A
    type: con_res
    content:
        anoncrypt( {
            did: did@A:B
            vk: vk@A:B
            }, vk@B:A)
          }
anoncrypt(con_res, ep vk@B)
end note


A -->> B: Send connection response message
|||

rnote over B #white
ack = {
    id: did@A:B
    type: ack
    content:
        authcrypt( {
            "success"
            }, vk@A:B, vk@B:A)
      }
anoncrypt(ack, ep vk@A)
end note


B -->> A: B acknowledges success for transport & encryption 
|||

rnote over A #white
ack = {
    id: did@B:A
    type: ack
    content:
        authcrypt( {
            "success"
            }, vk@B:A, vk@A:B)
      }
anoncrypt(ack, ep vk@B)
end note


A -->> B: A acknowledges success for transport & encryption 
|||

A <-> B: A & B can now send authcrypted messages



@enduml
